/**TODO: 
    1. make the host id's more difficult use bcrypt */

1. User will first signin or signup. {normally jese krte hai using jwt tokens} âœ…

2. Now, user will choose the room, video call || voice call || chat , accoridinlgy, after which he will be assigned with hostId, {he now is admin can allow other users to enter in the room, can also make other people admin if want to.} âœ…

3. Now he can acces the api/sdk of the chat, throught he can integrate the chat features to his own code.
3.0 - now by using the hostId, he can connect to the agora chat server,
3.1 - build the agora chat server, which takes hostId as input in order to let user use it's service.
3.2 - when connect with agora chat server he then can use it's features,

DAY 2:
Create a server where host using the hostId can control the users, chats, etc. . Here user can join with userId , if permitted by the host. âœ…

Number of routes:
1. user will choose his room and will be given (hostId & roomId)

DAY3:
1. user can sign in : ROUTE âœ…
2. if user want to host -> hostId and roomId : ROUTE âœ…
3. if user want to join as guest -> guestId : ROUTE âœ…

DAY3:
1. STORE THE USERID AND ROOMID FROM DB -> when user signup/login store it's userId in a variable, same with roomid âœ…

let user = Ash
DAY4:
1. connect user with agora's server -> Ash will send his hostId to the server for validation, after validation Ash can choose the sdk product (chat, vc etc)
-> productKey "/createRoom" iss route pr allocate hojaegi, or ek key hogi serviceKEY to unlock the sdk, at the time of validation these two key should match aftet that ðŸ‘‡
2. After choosing serive he then will have the serviceKEY, through which he can integrate the product features to his code.