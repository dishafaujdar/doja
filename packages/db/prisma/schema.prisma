// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/*There'll be a user (host/guest with respective id's) 
  1. when host create many room  (one to many relation) -> roomName, roomId, creatorName, hostId
  2. when guest want to enter in the host's room (one to many) -> roomId 
  */

model User {
  id              String          @id @default(uuid())
  username        String          @unique
  password        String    
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  roomsHosted     Room[]          @relation("HostRooms") 
  roomsJoined     RoomUsers[]     
}

model Room {
  id              String          @id @default(uuid())
  roomName        String          @unique()
  createdAt       DateTime        @default(now())
  isPublic        Boolean         @default(true)
  ProductKey      String          @unique
  publicRoomId    String?         @unique 
  hostId          String          @map("userId")
  creator         User            @relation("HostRooms", fields: [hostId], references: [id]) 
  users           RoomUsers[]     
}

model RoomUsers {
  id              String          @id @default(uuid())
  roomId          String
  userId          String
  joinedAt        DateTime        @default(now())
  room            Room            @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id])
}


